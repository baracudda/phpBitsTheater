/*
 * Copyright (C) 2014 Blackmoon Info Tech Services
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * JavaScript utility functions.
 */
function selectElement(aId) {
	if (typeof aId!=='undefined') {
		var r = document.createRange();
		var e = document.getElementById(aId);
		var s = window.getSelection();
		r.selectNode(e);
		s.removeAllRanges();
		s.addRange(r);
	}
}

function jump_to_top() {
	$('html, body').animate({ scrollTop: 0 }, 'fast');
}

function zulu_to_local(id, phpTs) {
	var sts = new Date(phpTs*1000), s = sts.toLocaleString();
	document.getElementById(id).innerHTML = s;
}

/*
 * Copyright (C) 2008 John Resig
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
// changes by Ryan Fischbach: Class -> StdClass, init -> onCreate
(function(){
	var bLoadClassDef = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;

	// The base StdClass implementation (does nothing)
	this.StdClass = function(){};
	
	// Create a new StdClass that inherits from this class
	StdClass.extend = function(prop) {
		var _super = this.prototype;

		// Instantiate a base class (but only create the instance,
		// don't run the onCreate constructor)
		bLoadClassDef = true;
		var prototype = new this();
		bLoadClassDef = false;

		// Copy the properties over onto the new prototype
		for (var name in prop) {
			// Check if we're overwriting an existing function
			prototype[name] = typeof prop[name] === "function" &&
				typeof _super[name] === "function" && fnTest.test(prop[name]) ?
					(function(name, fn){
						return function() {
							var tmp = this._super;

							// Add a new ._super() method that is the same method
							// but on the super-class
							this._super = _super[name];

							// The method only need to be bound temporarily, so we
							// remove it when we're done executing
							var ret = fn.apply(this, arguments);
							this._super = tmp;

							return ret;
						};
					})(name, prop[name]) :
					prop[name];
		}

		// The dummy class constructor
		function StdClass() {
			// All construction is actually done in the onCreate method
			if ( !bLoadClassDef && this.onCreate )
				this.onCreate.apply(this, arguments);
		}

		// Populate our constructed prototype object
		StdClass.prototype = prototype;

		// Enforce the constructor to be what we expect
		StdClass.prototype.constructor = StdClass;

		// And make this class extendable
		StdClass.extend = arguments.callee;

		return StdClass;
	};
})();
/*
 * Copyright (C) 2014 Blackmoon Info Tech Services
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var BaseClass = StdClass.extend({
	onCreate: function() {
		//defined just to avoid a crash if you call _super() during onCreate
	}
});

/**
 * Since JS cannot handle default values in the function definition,
 * this function will return the arg or the default if arg is undefined.
 * @param aArg - the argument
 * @param aDef - the default
 * @returns Arg unless it is undefined, else Default.
 */
BaseClass.prototype.argOrDefault = function(aArg, aDef) {
	return ((typeof aArg) !== 'undefined') ? aArg : aDef;
};

/**
 * Helper function to bind methods as callback functions.
 * @param aMethod - name of method to call, or function itself
 * @returns {Function} Returns the anonymous function used as a callback.
 */
BaseClass.prototype.asCB = function(aMethod) {
	var thisone = this;
	var theFn = ((typeof aMethod) === 'function') ? aMethod : this[aMethod];
	return function() {
		return theFn.apply(thisone,arguments);
	};
};
BaseClass.prototype.bind = BaseClass.prototype.asCB; //alias

/**
 * Helper function to bind methods as callback functions.
 * @param aContext - the "this" var the method needs.
 * @returns {Function} Returns the anonymous function used as a callback.
 */
Function.prototype.asCB = function(aContext) {
	var theFn = this;
	return function() {
		return theFn.apply(aContext,arguments);
	};
};

/**
 * Pseudo-UUID, random + time "version 4" generated UUID.
 * @param {string} aGlue - (optional) defaults to "-".
 * @returns {String} v4 UUID.
 * @see http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
 */
BaseClass.prototype.createUUID = function(aGlue) {
	var g = this.argOrDefault(aGlue,'-');
	var d = new Date().getTime();
	var s = 'xxxxxxxx'+g+'xxxx'+g+'4xxx'+g+'yxxx'+g+'xxxxxxxxxxxx';
	var uuid = s.replace(/[xy]/g, function(c) {
		var r = (d + Math.random()*16)%16 | 0;
		d = Math.floor(d/16);
		return (c==='x' ? r : (r&0x7|0x8)).toString(16);
	});
	return uuid;
};
/*
 * Copyright (C) 2014 Blackmoon Info Tech Services
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * BasicObj is the base class with generic helper methods.
 */
function BasicObj() {
	"use strict"; //ECMAScript 5 Strict Mode
	this.mBrowserWidth = null;
	this.mBrowserHeight = null;
	setTimeout(this.bind(this,'_gbw'), 1000);
	return this;
}

/**
 * Helper function to bind methods as callback functions.
 * @param aTargetObject - context of the object to bind (usually "this")
 * @param aMethodName - name of method to call
 * @returns {Function} Returns the anonymous function used as a callback.
 */
BasicObj.prototype.bind = function(aTargetObject, aMethodName) {
    return function(arg){return aTargetObject[aMethodName](arg)}
}

/**
 * Since JS cannot handle default values in the function definition,
 * this function will return the arg or the default if arg is undefined.
 * @param aArg - the argument
 * @param aDef - the default
 * @returns Arg unless it is undefined, else Default.
 */
BasicObj.prototype.argOrDefault = function(aArg, aDef) {
	return ((typeof aArg) !== 'undefined') ? aArg : aDef;
}

/**
 * Random function [min ... max].  Avoid negatives.
 * @param aMin - minimum.
 * @param aMax - maximum.
 * @returns Returns a random from min to max inclusive.
 */
BasicObj.prototype.randomFromInterval = function(aMin,aMax) {
    return Math.floor(Math.random()*(aMax-aMin+1)+aMin);
}

/**
 * Sometimes the image is not loaded yet and we wish to draw it.
 * @param {element} aElem - element to drawImage() on.
 * @param {image} aImage - image to draw.
 * @param {int} x - x position.
 * @param {int} y - y position.
 * @param {int} w - (optional) width to use.
 * @param {int} h - (optional) height to use.
 * @returns {BasicObj} Returns this for chaining.
 */
BasicObj.prototype.drawImage = function(aElem, aImage, x,y,w,h) {
	w = this.argOrDefault(w,aImage.width);
	h = this.argOrDefault(h,aImage.height);
	if (aImage.complete) {
		aElem.drawImage(aImage,x,y,w,h);
	} else {
		aImage.onload = function() { aElem.drawImage(aImage,x,y,w,h); };
	}
	//return this for chaining calls
	return this;
};

/**
 * Generic "set event handler".
 * @param aEvent - event to listen to
 * @param aHandler - handler to bind, if string will bind to this.methodname
 * @param aObj - element to set the listener, defaults to window if not passed in
 */
BasicObj.prototype.addEvent = function(aEvent, aHandler, aObj) {
	var theHandler = (typeof aHandler !== 'string') ? aHandler : this.bind(this,aHandler);
	var theObj = aObj || window;
	if (theObj.addEventListener) { // W3C standard
		theObj.addEventListener(aEvent,theHandler,false);
	} else if (theObj.attachEvent) { // Microsoft
		theObj.attachEvent( 'on'+aEvent,theHandler);
	} else {
		theObj['on'+aEvent]=theHandler;
	}
	//return this for chaining calls
	return this;
}

/**
 * Cheap-ass mobile detection mechanism.  Seriously, use something better for production.
 * @returns {Boolean}
 */
BasicObj.prototype.couldBeMobileBrowser = function() {
	return (navigator.userAgent.match(/ipad|iphone|ipod|android|webos|blackberry/i) != null) || (screen.width<=480);
}

/**
 * @returns The client browser width.
 */
BasicObj.prototype._gbw = function() {
	var w=window, d=document, e=d.documentElement, g=d.getElementsByTagName('body')[0];
    this.mBrowserWidth = w.innerWidth || e.clientWidth || g.clientWidth;
    this.mBrowserHeight = w.innerHeight|| e.clientHeight || g.clientHeight;
	return this.mBrowserWidth;
}

/**
 * @returns The client browser width.
 */
BasicObj.prototype.getBrowserWidth = function() {
	return this.mBrowserWidth || this._gbw();
}

/*
 * Copyright (C) 2014 Blackmoon Info Tech Services
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * AjaxDataUpdater is a "behind-the-scenes" AJAX data updater. 
 * @param aOnLoadURL - the onLoad data URL, called only once when .start runs.
 * @param aOnUpdateURL - the onUpdate data URL, called repeatedly after onLoad (if defined) between delay times.
 * @param aOnReceiveData - the external callback once data is retrieved.
 * @param aDelayMin - minimum milliseconds before calling the update URL again; default is 2000.
 * @param aDelayMax - maximum milliseconds before calling the update URL again; default is 5000; if smaller than aDelayMin, will be set equal to it.
 */
function AjaxDataUpdater(aOnLoadURL, aOnUpdateURL, aOnReceiveData, aDelayMin, aDelayMax) {
	BasicObj.call(this);
	this.mDebugAjaxData = true;
	this.mOnLoadURL = aOnLoadURL;
	this.mOnUpdateURL = aOnUpdateURL;
	this.mOnReceiveData = (typeof aOnReceiveData!=='undefined') ? aOnReceiveData : this.bind(this,'dummyCallback');
	this.mDelayMin = this.argOrDefault(aDelayMin,2000);
	this.mDelayMax = this.argOrDefault(aDelayMax,5000);
	if (this.mDelayMax<this.mDelayMin) {
		this.mDelayMax = this.mDelayMin;
	}
	this.mPostData = null;
	this.bStarted = false;
	this.bDone = false;
	this.bAutoParse = true;
	this.mHttpRequest = this.getAJAXrequest(this.bind(this,'handleStateChange'),this.bind(this,'handleTimeout'));
	return this;
}

//setting up the inheritance
AjaxDataUpdater.prototype = Object.create(BasicObj.prototype);

/**
 * Data will continually be updated unless stopped with this function.
 */
AjaxDataUpdater.prototype.stop = function() {
	this.bDone = true;
}

/**
 * This function is only used when an onReceiveData callback is not defined.
 * Used mainly for INSERT/UPDATE/DELETE data calls that do not require feedback.
 */
AjaxDataUpdater.prototype.dummyCallback = function() {
	//do nothing
}

/**
 * Response text will be automatically parsed if TRUE, returned unmolested if FALSE. Default TRUE.
 * @param aBool - true or false.
 */
AjaxDataUpdater.prototype.setAutoParse = function(aBool) {
	this.bAutoParse = aBool;
}

/**
 * Callback method to determine when Ajax call is ready to deliver responseText.
 */
AjaxDataUpdater.prototype.handleStateChange = function() {
	if (this.mHttpRequest.readyState == 4) {
        switch (this.mHttpRequest.status) {
        case 200: //Success!
			this.requestDataCallback();
            break;
        case 408: //Request Timeout.
			console.log('408 error. Re-sending ajax request.');
			if (!this.bDone) {
				setTimeout(this.bind(this,'sendAjaxRequest'), this.randomFromInterval(this.mDelayMin,this.mDelayMax));
			}
            break;
        case 331: //Chrome: net::ERR_NETWORK_IO_SUSPENDED
            //laptop put to sleep and then awakened, net connection to page needs a reload.
			console.log('Chrome "net::ERR_NETWORK_IO_SUSPENDED" (331) error. Reloading page.');
			window.location.reload();
            break;
        case 504: //Gateway Timeout.
			console.log('Gateway timeout error. Reloading page.');
			window.location.reload();
            break;
		default:
			console.log('HTTP response: '+this.mHttpRequest.status+". This particular failure not handled, yet.");			
		}
	}
}

/**
 * Callback method to determine when Ajax call is ready to deliver responseText.
 */
AjaxDataUpdater.prototype.handleTimeout = function() {
	alert('Server took too long to respond, keeping quiet until you hit Refresh/Reload page.')
}

/**
 * Based on the browser, get the appropriate AJAX object to use.
 * @returns Returns the proper {XMLHttpRequest}/{ActiveXObject object. 
 */
AjaxDataUpdater.prototype.getAJAXrequest = function(aOnStateChange, aOnTimeout) {
	var theHttpRequest = null;
	if (window.XMLHttpRequest) { // Mozilla, Safari, ...
		theHttpRequest = new XMLHttpRequest();
	} else if (window.ActiveXObject) { // MSIE
		theHttpRequest = new ActiveXObject("Microsoft.XMLHTTP");
	}
	if (theHttpRequest!=null) {
		theHttpRequest.onreadystatechange = aOnStateChange;
		theHttpRequest.ontimeout = aOnTimeout;
	}
	return theHttpRequest;
}

/**
 * Heart of the class, this function executes the request and passes headers and data approprately.
 * Use .start or .startonload instead of this one directly.
 * @param aRequestUrl - URL for the request, will be either the onLoad or onUpdate URLs.
 */
AjaxDataUpdater.prototype.sendAjaxRequest = function(aRequestUrl) {
	if (this.mHttpRequest && !this.bDone) try {
		this.bStarted = true;
		this.mHttpRequest.mRequestUrl = this.argOrDefault(aRequestUrl,this.mOnUpdateURL);
		if (!this.mPostData) {
			this.mHttpRequest.open("GET", this.mHttpRequest.mRequestUrl, true);
			this.mHttpRequest.setRequestHeader("X-Requested-With", "XMLHttpRequest");
			this.mHttpRequest.setRequestHeader("Cache-Control", "no-cache");
			this.mHttpRequest.send();
		} else {
			this.mHttpRequest.open("POST", this.mHttpRequest.mRequestUrl, true);
			this.mHttpRequest.setRequestHeader("X-Requested-With", "XMLHttpRequest");
			this.mHttpRequest.setRequestHeader("Cache-Control", "no-cache");
			this.mHttpRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
			//we are not supposed to set Content-length: https://www.owasp.org/index.php/HTTP_Request_Smuggling
			//this.mHttpRequest.setRequestHeader("Content-length", this.mPostData.length);
			this.mHttpRequest.send(this.mPostData);
			console.log('sendAjaxRequest URL='+this.mHttpRequest.mRequestUrl+' PostData='+this.mPostData);
		}
	} catch(err) {
		console.log('Error 1/3: AjaxDataUpdater.sendAjaxRequest URL='+this.mHttpRequest.mRequestUrl);
		if (this.mDebugAjaxData == true) {
			console.log('Error 2/3: PostData='+this.mPostData);
		} else {
			console.log('Error 2/3: PostData=(not available)');
		}
		console.log('Error 3/3: ErrMsg='+err.message.trim());
		if (this.mDebugAjaxData == true) {
			alert('AJAX call returned an unhandled error. Check the console for details.');
		}
	}
}

/**
 * If JSON data is detected, automatically decode it before returning it to the callback function.
 * This feature may be disabled with .setAutoParse(false);
 * @returns Returns the responseText parsed appropriately (only JSON supported at this time).
 */
AjaxDataUpdater.prototype.parseDataRequested = function() {
	if (this.bAutoParse && this.mHttpRequest.getResponseHeader("Content-Type")=="application/json; charset=utf-8") {
		return JSON.parse(this.mHttpRequest.responseText);
	} else {
		return this.mHttpRequest.responseText;
	}
}

/**
 * This callback function is called when the data is ready (readyState=4) for either init or update data.
 */
AjaxDataUpdater.prototype.requestDataCallback = function() {
	try {
		var theData = this.parseDataRequested();
		if (theData!==null && !this.bDone) {
			this.mOnReceiveData(theData);
		}
	} catch(err) {
		console.log('Error 1/3: AjaxDataUpdater.requestDataCallback URL='+this.mHttpRequest.mRequestUrl);
		console.log('Error 2/3: Response='+this.mHttpRequest.responseText);
		console.log('Error 3/3: ErrMsg='+err.message.trim());
		if (this.mDebugAjaxData == true) {
			alert('AJAX call returned an unhandled error. Check the console for details.');
		}
	}
	if (!this.mOnUpdateURL) {
		this.stop();
	}
	if (!this.bDone) {
		setTimeout(this.bind(this,'sendAjaxRequest'), this.randomFromInterval(this.mDelayMin,this.mDelayMax));
	}
}

/**
 * Call this function to start the ajax calls immediately, or with a delay in milliseconds.
 * @param aDelay - optional timeout delay (in milliseconds).
 * @returns Returns self, {AjaxDataUpdater}, for chaining purposes.
 */
AjaxDataUpdater.prototype.start = function(aDelay) {
	var theDelay = this.argOrDefault(aDelay,0);
	if (theDelay>0) {
		setTimeout(this.bind(this,'start'),theDelay);
		return this;
	}
	if (!this.bStarted && this.mOnLoadURL)
		this.sendAjaxRequest(this.mOnLoadURL);
	else
		this.sendAjaxRequest(this.mOnUpdateURL);
	return this;
}

/**
 * Call this function if you want to start the ajax calls once the page is finished loading.
 * @returns Returns self, {AjaxDataUpdater}, for chaining purposes.
 */
AjaxDataUpdater.prototype.startOnLoad = function() {
	this.addEvent('load', 'start');
	return this;
}

/**
 * Data to be included with an ajax call. Call repeated for each key/value pair to add.
 * @param aKey - key string
 * @param aValue - value as string (it will be made URL-safe)
 * @returns {AjaxDataUpdater} Returns "this" for chaining.
 */
AjaxDataUpdater.prototype.addPostData = function(aKey, aValue) {
	if (!this.mPostData) {
		this.mPostData = {};
		this.mPostData = aKey+'='+encodeURIComponent(aValue);
	} else {
		this.mPostData += '&'+aKey+'='+encodeURIComponent(aValue);		
	}
	return this;
}

